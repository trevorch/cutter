#!/usr/bin/env python3
import json
import requests
import time
from datetime import datetime, timedelta
from typing import Dict, List

class VideoFetcher:
    def __init__(self):
        self.base_url = "https://live.kuaishou.com"
        self.page_size = 20
        self.page_cursor = ""
        self.has_more = True
        self.videos: List[Dict] = []
        self.processed_ids = set()


    def fetch_api(self, url: str) -> Dict:
        """统一API请求方法"""
        try:
            headers = {
                "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
                "Accept": "application/json",
                "Referer": "https://live.kuaishou.com/",
                "Sec-Fetch-Mode": "cors",
                "Accept-Language": "zh-CN,zh;q=0.9",
            }
            
            print(f"\n正在请求URL: {url}")
            response = requests.get(url, headers=headers, timeout=10)
            
            # 调试信息
            print(f"响应状态码: {response.status_code}")
            print("响应内容类型:", response.headers.get('Content-Type'))
            print("响应体前500字符:", response.text[:500])
            
            response.raise_for_status()
            
            # 验证JSON类型
            content_type = response.headers.get('Content-Type', '')
            if 'application/json' not in content_type:
                raise RuntimeError(f"非JSON响应，实际内容类型: {content_type}")
                
            return response.json()
        except requests.exceptions.RequestException as e:
            err_resp = getattr(e, 'response', None)
            if err_resp:
                print(f"错误响应内容: {err_resp.text[:500]}...")
            raise RuntimeError(f"API请求失败: {str(e)}") from e
        except json.JSONDecodeError as e:
            print("完整的响应内容：")
            print(response.text)
            raise RuntimeError(f"JSON解析失败: {str(e)}") from e
        finally:
            # 无论成功与否都增加1秒延迟
            time.sleep(1)


    def get_video_list(self) -> List[Dict]:
        """获取分页视频列表"""
        url = (
            f"{self.base_url}/live_api/playback/list"
            f"?count={self.page_size}"
            f"&principalId=dabingdekuaishou"
            f"&pcursor={self.page_cursor}"
        )
        print("\n" + "="*50)
        print("正在获取视频列表...")
        resp_data = self.fetch_api(url)
        data = resp_data["data"]
        
        self.page_cursor = data.get("pcursor", "")
        self.has_more = bool(self.page_cursor)
        print(f"新游标: {self.page_cursor}, 是否还有更多: {self.has_more}")
        return data.get("list", [])

    def get_video_detail(self, video_id: str) -> Dict:
        """获取单个视频详情（含时间格式化）"""
        url = f"{self.base_url}/live_api/playback/detail?productId={video_id}"
        print("\n" + "-"*50)
        print(f"正在获取视频详情: {video_id}")
        
        resp_data = self.fetch_api(url)
        data = resp_data["data"]["currentWork"]
        
        # 处理播放地址
        play_urls = []
        if data.get("playUrl"):
            play_urls.append(data["playUrl"])
        if data.get("playUrlV2"):
            play_urls.extend(data["playUrlV2"].values())
        
        # 时间格式化处理
        timestamp = data["createTime"]
        try:
            # 转换为北京时间 (UTC+8)
            utc_time = datetime.utcfromtimestamp(timestamp / 1000)
            beijing_time = utc_time + timedelta(hours=8)
            timestr = beijing_time.strftime("%Y%m%d %H:%M:%S")
        except Exception as e:
            print(f"时间格式转换失败: {str(e)}")
            timestr = "00000000 00:00:00"
        
        print(f"解析到 {len(play_urls)} 个有效播放地址")
        return {
            "id": video_id,
            "timestamp": timestamp,
            "date": timestr,
            "urls": [url for url in play_urls if url.startswith("http")]
        }

    def process_videos(self):
        """主处理流程"""
        while self.has_more:
            try:
                items = self.get_video_list()
                print(f"获取到 {len(items)} 条视频数据")
                
                for idx, item in enumerate(items, 1):
                    video_id = item["id"]
                    print(f"\n处理第 {idx}/{len(items)} 个视频: {video_id}")
                    
                    if video_id in self.processed_ids:
                        print("视频已处理，跳过")
                        continue
                    
                    try:
                        detail = self.get_video_detail(video_id)
                        self.videos.append(detail)
                        self.processed_ids.add(video_id)
                        print("视频处理成功")
                    except Exception as e:
                        print(f"视频处理失败: {str(e)}")
                
                # 按时间戳降序排序
                self.videos.sort(key=lambda x: x["timestamp"], reverse=True)
                print(f"当前已收集 {len(self.videos)} 个有效视频")
                
            except Exception as e:
                print(f"处理过程中发生错误: {str(e)}")
                self.has_more = False

    def save_to_json(self, filename: str = "./video.new"):
        """保存结果到JSON文件"""
        with open(filename, "w", encoding="utf-8") as f:
            json.dump(self.videos, f, ensure_ascii=False, indent=2)
        print(f"数据已保存到 {filename}")

if __name__ == "__main__":
    fetcher = VideoFetcher()
    try:
        fetcher.process_videos()
        fetcher.save_to_json()
    except KeyboardInterrupt:
        print("\n用户中断，正在保存已获取的数据...")
        fetcher.save_to_json("partial_video_data.json")
